import 'package:makeitdark/core/models/cell.dart';
import 'package:makeitdark/core/models/level.dart';

class Levels {
  static List<Level> allLevels = [
    Level(id: '3x3s1n1', bestResult: 1, goodResult: 4, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1, true),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3, true),
    ], solution: [
      Cell(2, 2)
    ]),
    Level(id: '3x3s1n2', bestResult: 1, goodResult: 4, cells: [
      Cell(1, 1, true),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2, true),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3, true),
    ], solution: [
      Cell(1, 3)
    ]),
    Level(id: '3x3s1n3', bestResult: 1, goodResult: 4, cells: [
      Cell(1, 1, true),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
    ], solution: [
      Cell(2, 3)
    ]),
    Level(id: '3x3s2n1', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(1, 2, true),
      Cell(2, 2, true),
      Cell(3, 2, true),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
    ], solution: [
      Cell(2, 1),
      Cell(2, 3)
    ]),
    Level(id: '3x3s3n1', bestResult: 3, goodResult: 6, cells: [
      Cell(1, 1),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(1, 3, true),
      Cell(2, 3, true),
      Cell(3, 3),
    ], solution: [
      Cell(1, 1),
      Cell(2, 2),
      Cell(3, 3),
    ]),
    Level(id: '3x3s4n1', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1, true),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3, true),
    ], solution: [
      Cell(2, 1),
      Cell(3, 2),
      Cell(2, 3),
      Cell(1, 2),
    ]),
    Level(id: '3x3s4n2', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
    ], solution: [
      Cell(1, 1),
      Cell(1, 3),
      Cell(3, 3),
      Cell(2, 2),
    ]),
    Level(id: '3x3s5n1', bestResult: 5, goodResult: 8, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
    ], solution: [
      Cell(1, 1),
      Cell(3, 1),
      Cell(3, 3),
      Cell(1, 3),
      Cell(2, 2),
    ]),
    Level(id: '3x3s5n2', bestResult: 5, goodResult: 8, cells: [
      Cell(1, 1, true),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(1, 3, true),
      Cell(2, 3, true),
      Cell(3, 3, true),
    ], solution: [
      Cell(2, 1),
      Cell(3, 2),
      Cell(2, 3),
      Cell(1, 2),
      Cell(2, 2),
    ]),
    Level(id: '4x4s4n3', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2, true),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3, true),
      Cell(3, 3, true),
      Cell(4, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
    ], solution: [
      Cell(1, 1),
      Cell(4, 1),
      Cell(4, 4),
      Cell(1, 4),
    ]),
    Level(id: '4x4s2n2', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1, true),
      Cell(4, 1, true),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(4, 2, true),
      Cell(1, 3, true),
      Cell(2, 3, true),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4, true),
      Cell(2, 4, true),
      Cell(3, 4),
      Cell(4, 4, true),
    ], solution: [
      Cell(2, 2),
      Cell(3, 3),
    ]),
    Level(id: '4x4s2n3', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2, true),
      Cell(2, 2, true),
      Cell(3, 2),
      Cell(4, 2, true),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3, true),
      Cell(4, 3, true),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4, true),
    ], solution: [
      Cell(3, 1),
      Cell(2, 4),
    ]),
    Level(id: '4x4s2n4', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(4, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(4, 2, true),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3, true),
      Cell(4, 3, true),
      Cell(1, 4),
      Cell(2, 4, true),
      Cell(3, 4, true),
      Cell(4, 4, true),
    ], solution: [
      Cell(1, 2),
      Cell(1, 3),
    ]),
    Level(id: '4x4s2n5', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1, true),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2, true),
      Cell(4, 2),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3, true),
      Cell(1, 4, true),
      Cell(2, 4, true),
      Cell(3, 4, true),
      Cell(4, 4, true),
    ], solution: [
      Cell(2, 2),
      Cell(3, 2),
    ]),
    Level(id: '4x4s2n6', bestResult: 2, goodResult: 5, cells: [
      Cell(1, 1),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3, true),
      Cell(3, 3, true),
      Cell(4, 3),
      Cell(1, 4, true),
      Cell(2, 4, true),
      Cell(3, 4, true),
      Cell(4, 4, true),
    ], solution: [
      Cell(1, 2),
      Cell(4, 2),
    ]),
    Level(id: '4x4s1n4', bestResult: 1, goodResult: 4, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1, true),
      Cell(4, 1, true),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2, true),
      Cell(1, 3, true),
      Cell(2, 3),
      Cell(3, 3, true),
      Cell(4, 3, true),
      Cell(1, 4, true),
      Cell(2, 4, true),
      Cell(3, 4, true),
      Cell(4, 4, true),
    ], solution: [
      Cell(2, 2),
    ]),
    Level(id: '4x4s2n7', bestResult: 1, goodResult: 4, cells: [
      Cell(1, 1, true),
      Cell(2, 1, true),
      Cell(3, 1),
      Cell(4, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3, true),
      Cell(3, 3),
      Cell(4, 3, true),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4, true),
      Cell(4, 4, true),
    ], solution: [
      Cell(3, 2),
      Cell(4, 1),
    ]),



    Level(id: '4x4s_n', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
    ], solution: [
      Cell(1, 1),
      Cell(4, 1),
      Cell(4, 4),
      Cell(1, 4),
    ]),
    Level(id: '4x4s_n', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
    ], solution: [
      Cell(1, 1),
      Cell(4, 1),
      Cell(4, 4),
      Cell(1, 4),
    ]),
    Level(id: '4x4s_n', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
    ], solution: [
      Cell(1, 1),
      Cell(4, 1),
      Cell(4, 4),
      Cell(1, 4),
    ]),

    
    Level(id: '4x4s4n4', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4, true),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
    ], solution: [
      Cell(1, 1),
      Cell(2, 3),
      Cell(4, 1),
      Cell(4, 4),
    ]),
    Level(id: '4x4s4n5', bestResult: 4, goodResult: 7, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1, true),
      Cell(1, 2),
      Cell(2, 2),
      Cell(3, 2),
      Cell(4, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3),
      Cell(4, 3),
      Cell(1, 4, true),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4, true),
    ], solution: [
      Cell(2, 2),
      Cell(2, 3),
      Cell(3, 3),
      Cell(3, 2),
    ]),
    Level(id: '5x5s5n3', bestResult: 5, goodResult: 8, cells: [
      Cell(1, 1),
      Cell(2, 1, true),
      Cell(3, 1, true),
      Cell(4, 1, true),
      Cell(5, 1, true),
      Cell(1, 2, true),
      Cell(2, 2),
      Cell(3, 2, true),
      Cell(4, 2, true),
      Cell(5, 2, true),
      Cell(1, 3, true),
      Cell(2, 3, true),
      Cell(3, 3),
      Cell(4, 3, true),
      Cell(5, 3, true),
      Cell(1, 4, true),
      Cell(2, 4, true),
      Cell(3, 4, true),
      Cell(4, 4),
      Cell(5, 4, true),
      Cell(1, 5, true),
      Cell(2, 5, true),
      Cell(3, 5, true),
      Cell(4, 5, true),
      Cell(5, 5),
    ], solution: [
      Cell(1, 1),
      Cell(2, 2),
      Cell(3, 3),
      Cell(4, 4),
      Cell(5, 5),
    ]),
    Level(id: '5x5s5n4', bestResult: 5, goodResult: 8, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(5, 1),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2),
      Cell(4, 2),
      Cell(5, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3, true),
      Cell(4, 3),
      Cell(5, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4),
      Cell(5, 4),
      Cell(1, 5),
      Cell(2, 5),
      Cell(3, 5),
      Cell(4, 5),
      Cell(5, 5, true),
    ], solution: [
      Cell(1, 3),
      Cell(2, 5),
      Cell(3, 1),
      Cell(5, 2),
      Cell(4, 4),
    ]),
    Level(id: '5x5s10n1', bestResult: 10, goodResult: 13, cells: [
      Cell(1, 1, true),
      Cell(2, 1),
      Cell(3, 1),
      Cell(4, 1),
      Cell(5, 1),
      Cell(1, 2),
      Cell(2, 2, true),
      Cell(3, 2),
      Cell(4, 2),
      Cell(5, 2),
      Cell(1, 3),
      Cell(2, 3),
      Cell(3, 3, true),
      Cell(4, 3),
      Cell(5, 3),
      Cell(1, 4),
      Cell(2, 4),
      Cell(3, 4),
      Cell(4, 4, true),
      Cell(5, 4),
      Cell(1, 5),
      Cell(2, 5),
      Cell(3, 5),
      Cell(4, 5),
      Cell(5, 5, true),
    ], solution: [
      Cell(1, 2),
      Cell(2, 1),
      Cell(2, 4),
      Cell(4, 2),
      Cell(2, 5),
      Cell(5, 2),
      Cell(3, 5),
      Cell(5, 3),
      Cell(3, 4),
      Cell(4, 3),
    ]),
  ];
}
